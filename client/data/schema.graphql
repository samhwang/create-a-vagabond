"""Exposes a URL that specifies the behavior of this scalar."""
directive @specifiedBy(
  """The URL that specifies the behavior of this scalar."""
  url: String!
) on SCALAR

type Error {
  message: String!
}

type Mutation {
  vagabondCreate(input: VagabondCreateInput!): MutationVagabondCreateResult!
  vagabondUpdateStats(input: VagabondUpdateStatsInput!): MutationVagabondUpdateStatsResult!
}

union MutationVagabondCreateResult = Error | MutationVagabondCreateSuccess

type MutationVagabondCreateSuccess {
  data: VagabondCreatePayload!
}

union MutationVagabondUpdateStatsResult = Error | MutationVagabondUpdateStatsSuccess

type MutationVagabondUpdateStatsSuccess {
  data: VagabondUpdateStatsPayload!
}

interface Node {
  id: ID!
}

type PageInfo {
  endCursor: String
  hasNextPage: Boolean!
  hasPreviousPage: Boolean!
  startCursor: String
}

type Query {
  me: User!
  node(id: ID!): Node
  nodes(ids: [ID!]!): [Node]!
  roguishFeatConnection(after: String, before: String, first: Int, last: Int): QueryRoguishFeatConnection!
  vagabondClassConnection(after: String, before: String, first: Int, last: Int): QueryVagabondClassConnection!
}

type QueryRoguishFeatConnection {
  edges: [QueryRoguishFeatConnectionEdge]!
  pageInfo: PageInfo!
}

type QueryRoguishFeatConnectionEdge {
  cursor: String!
  node: RoguishFeat!
}

type QueryVagabondClassConnection {
  edges: [QueryVagabondClassConnectionEdge]!
  pageInfo: PageInfo!
}

type QueryVagabondClassConnectionEdge {
  cursor: String!
  node: VagabondClass!
}

type RoguishFeat implements Node {
  description: String!
  id: ID!
  name: String!
  risks: [String!]!
}

type User implements Node {
  email: String!
  firstName: String
  id: ID!
  lastName: String
  profileImage: String!
  username: String
  vagabondConnection(after: String, before: String, first: Int, last: Int): UserVagabondConnection!
}

type UserVagabondConnection {
  edges: [UserVagabondConnectionEdge]!
  pageInfo: PageInfo!
}

type UserVagabondConnectionEdge {
  cursor: String!
  node: Vagabond!
}

type Vagabond implements Node {
  availablePoints: Int!
  charm: Int!
  class: VagabondClass!
  cunning: Int!
  finesse: Int!
  id: ID!
  luck: Int!
  might: Int!
  name: String!
  user: User!
}

type VagabondClass implements Node {
  drives: [String!]!
  id: ID!
  name: String!
  natures: [String!]!
  startingCharm: Int!
  startingCunning: Int!
  startingFinesse: Int!
  startingLuck: Int!
  startingMight: Int!
  startingRoguishFeats(after: String, before: String, first: Int, last: Int): VagabondClassStartingRoguishFeatsConnection!
  startingWeaponSkills: [String!]!
}

type VagabondClassStartingRoguishFeatsConnection {
  edges: [VagabondClassStartingRoguishFeatsConnectionEdge]!
  pageInfo: PageInfo!
}

type VagabondClassStartingRoguishFeatsConnectionEdge {
  cursor: String!
  node: RoguishFeat!
}

input VagabondCreateInput {
  charm: Int!
  class: ID!
  cunning: Int!
  drives: [String!]!
  finesse: Int!
  luck: Int!
  might: Int!
  name: String!
  nature: String!
  roguishFeats: [ID!]!
}

type VagabondCreatePayload {
  vagabond: Vagabond!
}

input VagabondUpdateStatsInput {
  charm: Int = 0
  cunning: Int = 0
  finesse: Int = 0
  luck: Int = 0
  might: Int = 0
  vagabondId: ID!
}

type VagabondUpdateStatsPayload {
  vagabond: Vagabond!
}

