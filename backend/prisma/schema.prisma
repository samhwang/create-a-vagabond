generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "rhel-openssl-1.0.x"]
}

generator pothos {
  provider = "prisma-pothos-types"
}

datasource db {
  provider     = "mysql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

model VagabondClass {
  id              String @id
  name            String
  startingCharm   Int
  startingCunning Int
  startingFinesse Int
  startingLuck    Int
  startingMight   Int
  startingValue   Int

  natures      Nature[]
  drives       Drive[]
  roguishFeats RoguishFeat[]
  weaponSkills WeaponSkill[]
  classMoves   ClassMove[]

  vagabond Vagabond[]
}

model Vagabond {
  id String @id @default(cuid())

  userId          String
  class           VagabondClass @relation(fields: [vagabondClassId], references: [id])
  vagabondClassId String

  name                  String
  species               String
  details               String
  demeanor              String
  background_home       String
  background_vagabond   String
  background_leftBehind String
  connections           VagabondConnection[]
  reputations           Reputation[]

  value           Int
  carrying        Int @default(0)
  charm           Int @default(0)
  cunning         Int @default(0)
  finesse         Int @default(0)
  luck            Int @default(0)
  might           Int @default(0)
  availablePoints Int @default(0)

  nature       Nature?       @relation(fields: [natureId], references: [id])
  natureId     String?
  drives       Drive[]
  roguishFeats RoguishFeat[]
  weaponSkills WeaponSkill[]
  classMoves   ClassMove[]

  equipment VagabondEquipment[]

  @@index([userId])
  @@index([natureId])
  @@index([vagabondClassId])
}

model Nature {
  id            String          @id
  name          String
  description   String
  vagabond      Vagabond[]
  vagabondClass VagabondClass[]
}

model Drive {
  id            String          @id
  name          String
  description   String
  vagabond      Vagabond[]
  vagabondClass VagabondClass[]
}

model VagabondConnection {
  id         String    @id @default(cuid())
  type       String
  notes      String
  to         String // other vagabond
  vagabond   Vagabond? @relation(fields: [vagabondId], references: [id], onDelete: Cascade)
  vagabondId String?

  @@index([vagabondId])
}

model RoguishFeat {
  id              String          @id
  name            String
  description     String
  risks           Json // string[]
  vagabondClasses VagabondClass[]
  vagabonds       Vagabond[]
}

model Reputation {
  id         String   @id @default(cuid())
  vagabondId String
  vagabond   Vagabond @relation(fields: [vagabondId], references: [id], onDelete: Cascade)
  faction    String   @default("Denizens")
  score      Int      @default(0)
  prestige   Int      @default(0)
  notoriety  Int      @default(0)

  @@index([vagabondId])
}

enum WeaponSkillType {
  NORMAL
  SPECIAL
}

model WeaponSkill {
  id            String          @id
  name          String
  type          WeaponSkillType @default(NORMAL)
  description   String          @db.MediumText
  vagabondClass VagabondClass[]
  vagabond      Vagabond[]
  equipment     Equipment[]
}

model ClassMove {
  id            String          @id
  name          String
  description   String          @db.Text
  vagabondClass VagabondClass[]
  vagabond      Vagabond[]
}

enum EquipmentTagType {
  POSITIVE
  NEGATIVE
}

model EquipmentTag {
  id          String           @id
  name        String
  description String
  type        EquipmentTagType
  equipment   Equipment[]
}

model Equipment {
  id                String              @id
  name              String
  description       String
  range             Json //string[]
  maxWear           Int                 @default(4)
  value             Int                 @default(0)
  load              Int                 @default(0)
  tags              EquipmentTag[]
  weaponMoveTags    WeaponSkill[]
  VagabondEquipment VagabondEquipment[]
}

model VagabondEquipment {
  id          String    @id @default(cuid())
  vagabondId  String
  vagabond    Vagabond  @relation(fields: [vagabondId], references: [id], onDelete: Cascade)
  equipmentId String
  equipment   Equipment @relation(fields: [equipmentId], references: [id], onDelete: Cascade)

  @@index([vagabondId])
  @@index([equipmentId])
}
